pipeline {
    agent none
    
    stages {
        stage('Checkout SCM') {
            agent {
                docker { 
                    label 'adocker'
                    image "$DOCKER_IMAGE"
                    args '-u 0:0'
                    reuseNode true
                }
            }
            when {
                expression {
                    return (SKIP_CHECKOUT == "false")
                }
            }
            
            steps {
                checkout(
                    [$class: 'GitSCM', 
                    branches: [[name: getBranchName()]], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [ getCheckoutExtensions() ], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [ buildUserRemoteCfg() ]
                ])

            }
        }
        
        stage('Build Project') {
            agent {
                docker { 
                    label 'adocker'
                    image "$DOCKER_IMAGE"
                    args '-u 0:0'
                    reuseNode true
                }
            }
            
            steps {
                echo "Perform Build"
                sh "./gradlew $GRADLE_TASK"
                archiveArtifacts artifacts: "$ARCHIVE_INCLUDE", excludes: "$ARCHIVE_EXCLUDE", fingerprint: true, onlyIfSuccessful: false

            }
        }
        
        stage('Test Project') {
            agent {
                docker { 
                    label 'adocker'
                    image "$DOCKER_IMAGE"
                    args '-u 0:0'
                    reuseNode true
                }
            }
            
            steps {
                echo "Perform Test Step"
            }
        }
        stage('Deployment') {
            parallel {
                stage('Deploy to Apperian') {
                    agent any

                    steps {
                        build job: "$DEPLOYMENT_JOB", parameters: [string(name: 'SOURCE_PROJECT', value: "$JOB_NAME")]
                    }
                }

                stage('Promote for Deployment to Google Play') {
                    agent any
                    steps {
                        build job: "$PROMOTION_JOB", parameters: [string(name: 'SOURCE_PROJECT', value: "$JOB_NAME")]
                    }
                }
            }
        }
    }
    
    // The options directive is for configuration that applies to the whole job.
    options {
        // And we'd really like to be sure that this build doesn't hang forever, so
        // let's time it out after an hour.
        timeout(time: 2, unit: 'DAYS')
    }
}

def getCheckoutExtensions() {
    def extensions = [:]
    
    if ("$GIT_UPDATE_SUBMODULES") {
        extensions << [
            $class: 'SubmoduleOption', 
            disableSubmodules: false, 
            parentCredentials: false, 
            recursiveSubmodules: true, 
            reference: '', 
            trackingSubmodules: false]
    }
    return extensions
}

def buildUserRemoteCfg() {
    def cfg = [url: "$GIT_URL"]
    if ("$GIT_CREDENTIALS"?.trim()) {
        cfg << [credentialsId: "$GIT_CREDENTIALS"]
    }
    return cfg
}

def getBranchName() {
    if ("$GIT_TAG"?.trim()) {
        return "ref/tags/$GIT_TAG"
    } else if("$GIT_COMMIT"?.trim()) {
        return "$GIT_COMMIT"
    } else if("$GIT_BRANCH"?.trim()) {
        return "$GIT_BRANCH"
    }
    return "master"
}
